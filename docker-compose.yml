version: '3.8'

services:
  # Base de donn√©es PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: heptuple-postgres-${INSTANCE_ID:-0}
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-heptuple_db_0}
      POSTGRES_USER: ${DB_USER:-heptuple_user_0}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-your_secure_password_here}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./sourates_complete.sql:/docker-entrypoint-initdb.d/sourates_complete.sql
      - ./extensions_references.sql:/docker-entrypoint-initdb.d/extensions_references.sql
    ports:
      - "5432"
    networks:
      - heptuple-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-heptuple_user_0} -d ${DB_NAME:-heptuple_db_0}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Cache Redis
  redis:
    image: redis:7-alpine
    container_name: heptuple-redis-${INSTANCE_ID:-0}
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-your_redis_password_here} --db ${REDIS_DB:-0}
    volumes:
      - redis_data:/data
    ports:
      - "6379"
    networks:
      - heptuple-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Elasticsearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.1
    container_name: heptuple-elasticsearch-${INSTANCE_ID:-0}
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - ELASTIC_PASSWORD=${ELASTICSEARCH_PASSWORD:-your_elastic_password_here}
      - cluster.name=heptuple-cluster-${INSTANCE_ID:-0}
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200"
      - "9300"
    networks:
      - heptuple-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # API Backend
  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: heptuple-api-${INSTANCE_ID:-0}
    restart: unless-stopped
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${DB_NAME:-heptuple_db_0}
      - DB_USER=${DB_USER:-heptuple_user_0}
      - DB_PASSWORD=${DB_PASSWORD:-your_secure_password_here}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-your_redis_password_here}
      - REDIS_DB=${REDIS_DB:-0}
      - ELASTICSEARCH_HOST=elasticsearch
      - ELASTICSEARCH_PORT=9200
      - ELASTICSEARCH_PASSWORD=${ELASTICSEARCH_PASSWORD:-your_elastic_password_here}
      - SECRET_KEY=${SECRET_KEY:-your_super_secret_key_here_change_in_production}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-your_jwt_secret_key_here_change_in_production}
      - DEBUG=${DEBUG:-false}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - INSTANCE_ID=${INSTANCE_ID:-0}
    volumes:
      - ./backend:/app
      - api_logs:/app/logs
      - api_data:/app/data
      - api_backup:/app/backup
    ports:
      - "8000"
    networks:
      - heptuple-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend React
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: heptuple-frontend-${INSTANCE_ID:-0}
    restart: unless-stopped
    environment:
      - REACT_APP_API_URL=/api
      - REACT_APP_ENVIRONMENT=${ENVIRONMENT:-production}
      - INSTANCE_ID=${INSTANCE_ID:-0}
    volumes:
      - frontend_logs:/var/log/nginx
    ports:
      - "3000"
    networks:
      - heptuple-network
    depends_on:
      api:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: heptuple-nginx-${INSTANCE_ID:-0}
    restart: unless-stopped
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - nginx_logs:/var/log/nginx
      - nginx_cache:/var/cache/nginx
    ports:
      - "80"
      - "443"
    networks:
      - heptuple-network
    depends_on:
      - api
      - frontend
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/nginx_status"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus pour le monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: heptuple-prometheus-${INSTANCE_ID:-0}
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090"
    networks:
      - heptuple-network

  # Grafana pour la visualisation
  grafana:
    image: grafana/grafana:latest
    container_name: heptuple-grafana-${INSTANCE_ID:-0}
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_INSTANCE_NAME=Heptuple-${INSTANCE_ID:-0}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3000"
    networks:
      - heptuple-network
    depends_on:
      - prometheus

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  elasticsearch_data:
    driver: local
  api_logs:
    driver: local
  api_data:
    driver: local
  api_backup:
    driver: local
  frontend_logs:
    driver: local
  nginx_logs:
    driver: local
  nginx_cache:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  heptuple-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
